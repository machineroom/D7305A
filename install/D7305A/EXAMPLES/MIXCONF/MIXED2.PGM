-- mixed2.pgm

-- Example of how to create a 'Type 2' mixed language configuration
-- for use with the occam configurer.

-- Here we have an occam program on the root processor, and a C program
-- on another processor, connected together by 2 links.
-- One link is used to send the server commands,
-- the other is used to transfer data between the occam and C programs.

-- Written 6 Feb 1991 by CO'N of INMOS.

NODE proc0, proc1 :
ARC hostlink :
NETWORK
  DO
    SET proc0(type, memsize := "T800", #200000)
    SET proc1(type, memsize := "T414", #200000)
    CONNECT proc0[link][0] TO HOST WITH hostlink
    CONNECT proc0[link][2] TO proc1[link][2]
    CONNECT proc0[link][3] TO proc1[link][3]

    --SET proc0(type, memsize := "T222", 32000)
    --SET proc1(type, memsize := "T425", #200000)
    --CONNECT proc0[link][3] TO HOST WITH hostlink
    --CONNECT proc0[link][2] TO proc1[link][1]
    --CONNECT proc0[link][0] TO proc1[link][3]
:

#INCLUDE "hostio.inc"
#USE "mixed2o.lku"
#USE "mixed2c.lku"

CONFIG
  CHAN OF SP fs, ts :
  PLACE fs, ts ON hostlink :

  CHAN OF SP    c.to.occam.server, occam.to.c.server :
  CHAN OF INT32 c.to.occam.int,    occam.to.c.int :
  PAR
    PROCESSOR proc0
      occam.program(fs, ts, c.to.occam.server, occam.to.c.server,
		    c.to.occam.int, occam.to.c.int)

    PROCESSOR proc1
      [10000]INT stack.and.heap :
      [1]INT dummy :
      [3]INT chan.in, chan.out :
      VAL flag IS 1 : -- This means combined stack and heap
      SEQ

        -- See INMOS Dx214A "C Toolset" manual, appendix F, for details of
        -- PROC.ENTRY

        -- Initalise the channels which are used to talk to the occam part
        -- (Channels 0 and 1 are reserved by PROC.ENTRY)
        LOAD.INPUT.CHANNEL (chan.in [2], occam.to.c.int)
        LOAD.OUTPUT.CHANNEL(chan.out[2], c.to.occam.int)

        -- The routine PROC.ENTRY has not got the direction
        -- information of the server channels recorded, for some unknown reason.
        -- Unfortunately this means that we always get configuration
        -- warnings.
        -- This could be avoided if we wrapped the call to PROC.ENTRY up
        -- in another occam routine, together with judicious use of
        -- LOAD.INPUT.CHANNEL and LOAD.OUTPUT.CHANNEL so that it was all
        -- marked appropriately.
        -- However, the configurer `guesses' correctly because it notices
        -- the directions which the other ends of the channels are used.
        PROC.ENTRY(occam.to.c.server, c.to.occam.server,
		   flag, stack.and.heap, dummy, chan.in, chan.out)
:
