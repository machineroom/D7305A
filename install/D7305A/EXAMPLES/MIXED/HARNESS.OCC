#INCLUDE "hostio.inc"

PROC the.main.process (CHAN OF SP fs, ts, []INT free.memory)
  #USE "hostio.lib"
  --{{{  PROC the.C.process
  PROC the.C.process (CHAN OF SP fs, ts,
                      CHAN OF INT fb, tb, []INT free.memory)
    #USE "centry.lib"       -- contains C predefines for types 1,2 and 3
    VAL bouncer IS 2:              -- index to channels for C process to use
    VAL flag    IS 1:              -- combine stack, heap and workspace
    [bouncer + 1]INT in, out:      -- pointers to channels
    [1]INT dummy:                  -- unused parameter for separate heapspace
    SEQ
      LOAD.INPUT.CHANNEL  (in[bouncer],  fb)
      LOAD.OUTPUT.CHANNEL (out[bouncer], tb)
  
      PROC.ENTRY (fs, ts, flag,    -- call the type-2 C program
                  free.memory,     -- workspace heapspace and stack
                  dummy,           -- not used when flag set to 1
                  in, out)         -- channel vectors in C parameters
  :
  --}}}
  --{{{  PROC bouncer
  PROC bouncer (CHAN OF INT in, out)
    INT data:
    SEQ
      in ? data
      WHILE data >= 0
        SEQ
          out ! data
          in ? data
  :
  --}}}
  SEQ
    so.write.string.nl (fs, ts, "Occam: Here we are in the world of occam")
    so.write.string.nl (fs, ts, "Occam: Now over to our friendly C program")

    CHAN OF INT fb, tb:
    PAR
      the.C.process (fs, ts, fb, tb, free.memory)
      bouncer (tb, fb)

    so.write.string.nl (fs, ts, "Occam: The End")
    so.exit (fs, ts, sps.success)
:
