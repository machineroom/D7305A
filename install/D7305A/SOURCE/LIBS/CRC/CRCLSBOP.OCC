--{{{  #options and #comments
#OPTION "W E" -- Full ASM code inserts, no compiler libraries
#COMMENT "Block CRC library, V1.3, 09/11/92"
#COMMENT "(c) Copyright INMOS Limited 1988"
--}}}


INT FUNCTION CRCFROMLSB (VAL []BYTE InputString,
                         VAL INT PolynomialGenerator,
                         VAL INT OldCRC)

  --{{{  specification
  -- Purpose:  To calculate a CRC value for a given byte array, starting
  --           from the least significant bit.
  -- Returned: The CRC value, in big-endian format, calculated for
  --           InputString with generator PolynomialGenerator and initial
  --           CRC value OldCRC; see Notes section for full details.
  -- In:       InputString - the byte array, in big-endian format, for
  --           which a CRC value is desired; by big-endian is meant that
  --           bits in order of decreasing significance from the point of
  --           view of interpretation of the byte array are situated in the
  --           positions of increasing significance of bits from the point
  --           of view of the transputer's bit format (little-endian - least
  --           significant bit (and word) at lowest address)
  -- In:       PolynomialGenerator - the co-efficients of the generating
  --           polynomial, with the co-efficient of x^16 or x^32
  --           understood; in little-endian format
  -- In:       OldCRC - this is used only as the initial CRC value during
  --           the iteration over the string; in little-endian format
  -- Notes:
  --           The string of bytes is polynomially divided starting from
  --           the least significant bit of the least significant byte in
  --           increasing bit order; this suits bytes and words in
  --           big-endian format, which is NOT transputer format.
  --
  --           A cyclic redundancy check value is the remainder from modulo
  --           2 polynomial division.  Consider bit sequences as representing
  --           the co-efficients of polynomials; for example, the bit sequence
  --           10100100 (where the leading bit is the most significant bit)
  --           corresponds to P(x) = x^7 + x^5 + x^2.  This routine calculates
  --           the remainder of the modulo 2 polynomial division
  --
  --                          ((x^(k+n))H(x) + (x^n)F(x))/G(x)
  --
  --           where F(x) corresponds to InputString, G(x) corresponds
  --           to PolynomialGenerator, H(x) corresponds to OldCRC, k is
  --           the number of bits in InputString, and n is the word size
  --           in bits of the processor used (i.e. n is 16 or 32). (OldCRC
  --           can be viewed as the value that would be pre-loaded into
  --           the cyclic shift register that is part of hardware
  --           implementations of CRC generators.)
  --
  --           When representing G(x) in the word PolynomialGenerator,
  --           note that there is an understood bit before the msb of
  --           PolynomialGenerator: for example, on a 16-bit processor,
  --           with G(x) = x^16 + x^12 + x^5 + 1, which is #11021, then
  --           PolynomialGenerator must be assigned #1021, as the bit
  --           corresponding to x^16 is understood.  Thus, a value of
  --           #9603 for PolynomialGenerator, corresponds to G(x) =
  --           x^16 + x^15 + x^12 + x^10 + x^9 + x + 1, for a 16-bit
  --           processor.  A similar situation holds on a 32-bit
  --           processor, so that G(x) = x^32 + x^26 + x^23 + x^22 +
  --           x^16 + x^12 + x^11 + x^10 + x^8 + x^7 + x^5 + x^4 +
  --           x^2 + x + 1 is encoded in PolynomialGenerator as
  --           #04C11DB7.  One can, however, calculate a 16-bit CRC on
  --           a 32-bit processor: say G(x) = x^16 + x^12 + x^5 + 1,
  --           then PolynomialGenerator is #10210000, as the most
  --           significant 16 bits of the 32-bit integer form a 16-bit
  --           generator; the least significant 16 bits of OldCRC form
  --           the initial CRC value; and the calculated CRC is the most
  --           significant 16 bits of the result from CRCFROMMSB, and
  --           the least significant 16 bits of the result from CRCFROMLSB.
  --}}}
  --{{{  more information
  --           CRC stands for cyclic redundancy check.  Such values can be
  --           of use in, for example, the generation of the frame check
  --           sequence (FCS) in data communications.
  --
  --           The CRC value for a string is a checksum useful for
  --           checking that a message was communicated without corruption.
  --
  --           Standards, CCITT X.25 for example, specify what
  --           PolynomialGenerator and OldCRC should be for the
  --           protocol of the standard.
  --}}}
  --{{{  history
  -- V1.0, 2-Nov-88
  -- Ported to use ASM.  V1.1; 7-Mar-90 SRH
  -- Corrected the specification comments.  V1.2, 24-Feb-92, SRH
  -- TS/1948: better ASM for calculation of WordCount, ByteCount and
  -- Aligned.  V1.3, 9-Nov-92 SRH
  --}}}

  INT CRCResult :
  VALOF
    --{{{  declarations
    VAL []BYTE ZeroWord RETYPES [0] :
    VAL BPW            IS SIZE ZeroWord : -- BytesPerWord
    VAL BufferWordSize IS 16 :
    VAL BufferSize     IS BufferWordSize * BPW :
    [BufferSize]BYTE AlignedBuffer : -- Assumes Byte vectors are word aligned
    PLACE AlignedBuffer IN WORKSPACE :
    INT Aligned :
    INT WordCount :
    INT ByteCount :
    INT Base :
    --}}}
    SEQ
      Base := 0
      CRCResult := OldCRC
      --{{{  Calculate WordCount, ByteCount and Aligned
      ByteCount := SIZE InputString
      ASM
        LD ByteCount
        WCNT        -- Areg := WordSel(Areg); Breg := ByteSel(Areg)
        STAB WordCount, ByteCount
        --
        -- Aligned := &InputString /\ (BPW - 1)
        LD ADDRESSOF InputString
        LDC (BPW - 1)
        AND  
        ST Aligned
      --}}}
      --{{{  CRC 16 Words at a time
      IF
        Aligned = 0
          WHILE (WordCount >= BufferWordSize)
            SEQ
              --{{{  CRC 16 words
              VAL AlignedBufferPrime IS [InputString FROM Base FOR BufferSize] :
              ASM
                LDL  PolynomialGenerator
                LDL  CRCResult
                LDL  AlignedBufferPrime
                LDNL 0
                BITREVWORD
                CRCWORD
                LDL  AlignedBufferPrime
                LDNL 1
                BITREVWORD
                CRCWORD
                LDL  AlignedBufferPrime
                LDNL 2
                BITREVWORD
                CRCWORD
                LDL  AlignedBufferPrime
                LDNL 3
                BITREVWORD
                CRCWORD
                LDL  AlignedBufferPrime
                LDNL 4
                BITREVWORD
                CRCWORD
                LDL  AlignedBufferPrime
                LDNL 5
                BITREVWORD
                CRCWORD
                LDL  AlignedBufferPrime
                LDNL 6
                BITREVWORD
                CRCWORD
                LDL  AlignedBufferPrime
                LDNL 7
                BITREVWORD
                CRCWORD
                LDL  AlignedBufferPrime
                LDNL 8
                BITREVWORD
                CRCWORD
                LDL  AlignedBufferPrime
                LDNL 9
                BITREVWORD
                CRCWORD
                LDL  AlignedBufferPrime
                LDNL 10
                BITREVWORD
                CRCWORD
                LDL  AlignedBufferPrime
                LDNL 11
                BITREVWORD
                CRCWORD
                LDL  AlignedBufferPrime
                LDNL 12
                BITREVWORD
                CRCWORD
                LDL  AlignedBufferPrime
                LDNL 13
                BITREVWORD
                CRCWORD
                LDL  AlignedBufferPrime
                LDNL 14
                BITREVWORD
                CRCWORD
                LDL  AlignedBufferPrime
                LDNL 15
                BITREVWORD
                CRCWORD
                ST   CRCResult
              --}}}
              WordCount := WordCount - BufferWordSize
              Base := Base + BufferSize
        TRUE
          WHILE (WordCount >= BufferWordSize)
            SEQ
              AlignedBuffer := [InputString FROM Base FOR BufferSize]
              --{{{  CRC 16 words
              ASM
                LDL  PolynomialGenerator
                LDL  CRCResult
                LDLP AlignedBuffer
                LDNL 0
                BITREVWORD
                CRCWORD
                LDLP AlignedBuffer
                LDNL 1
                BITREVWORD
                CRCWORD
                LDLP AlignedBuffer
                LDNL 2
                BITREVWORD
                CRCWORD
                LDLP AlignedBuffer
                LDNL 3
                BITREVWORD
                CRCWORD
                LDLP AlignedBuffer
                LDNL 4
                BITREVWORD
                CRCWORD
                LDLP AlignedBuffer
                LDNL 5
                BITREVWORD
                CRCWORD
                LDLP AlignedBuffer
                LDNL 6
                BITREVWORD
                CRCWORD
                LDLP AlignedBuffer
                LDNL 7
                BITREVWORD
                CRCWORD
                LDLP AlignedBuffer
                LDNL 8
                BITREVWORD
                CRCWORD
                LDLP AlignedBuffer
                LDNL 9
                BITREVWORD
                CRCWORD
                LDLP AlignedBuffer
                LDNL 10
                BITREVWORD
                CRCWORD
                LDLP AlignedBuffer
                LDNL 11
                BITREVWORD
                CRCWORD
                LDLP AlignedBuffer
                LDNL 12
                BITREVWORD
                CRCWORD
                LDLP AlignedBuffer
                LDNL 13
                BITREVWORD
                CRCWORD
                LDLP AlignedBuffer
                LDNL 14
                BITREVWORD
                CRCWORD
                LDLP AlignedBuffer
                LDNL 15
                BITREVWORD
                CRCWORD
                ST   CRCResult
              --}}}
              WordCount := WordCount - BufferWordSize
              Base := Base + BufferSize
      --}}}
      --{{{  Deal with remaining words
      IF
        WordCount > 0
          VAL Length IS WordCount * BPW :
          SEQ
            -- Copy remaining whole words into buffer and do CRC on buffer
            [AlignedBuffer FROM 0 FOR Length] := [InputString FROM Base FOR Length]
            []INT AlignedWordBuffer RETYPES AlignedBuffer :
            SEQ i = 0 FOR WordCount
              CRCResult := CRCWORD (BITREVWORD (AlignedWordBuffer[i]),
                                    CRCResult, PolynomialGenerator)
            Base := Base + Length
        TRUE
          SKIP
      --}}}
      --{{{  Deal with remaining bytes
      -- deal with remaining bytes (must be less than one word)
      IF
        ByteCount > 0
          SEQ
            -- Align remaining bytes of string into top part of word
            [AlignedBuffer FROM 0 FOR BPW] := ZeroWord
            [AlignedBuffer FROM 0 FOR ByteCount] := [InputString FROM Base FOR ByteCount]
            INT Data RETYPES [AlignedBuffer FROM 0 FOR BPW] :
            SEQ
              Data := BITREVWORD (Data)
              SEQ i = 0 FOR ByteCount
                SEQ
                  CRCResult := CRCBYTE (Data, CRCResult, PolynomialGenerator)
                  Data := Data << 8
        TRUE
          SKIP
      --}}}

    -- The MSB of the byte string must be shifted through
    -- CRCResult, with zero data shifted in from DataRegister.

    RESULT BITREVWORD (CRCWORD (0, CRCResult, PolynomialGenerator))
:
