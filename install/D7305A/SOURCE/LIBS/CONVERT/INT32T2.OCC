#OPTION "E V" -- no compiler libraries, no vector space
#COMMENT "Type conversion library V1.3 3/02/93"
#COMMENT "(c) Copyright INMOS Limited 1988"
#USE "ioconv.lib"
--{{{  history
-- V1.0, 1-Jul-88
-- Added V to OPTIONs; V1.1, 22/03/90 SRH
-- Put ValidDigit into an include file, and converted it into an
-- inline function.  TS/2044, V1.2, 18/01/93 SRH
-- Bug fix TS/2075 for STRINGTOINT32: when there are invalid characters
-- in the string after a negative number - it used to return the positive
-- of the number.  V1.3, 3/02/93 SRH
--}}}
--{{{  STRINGTOINT32 T2
PROC STRINGTOINT32 (BOOL Error, INT32 n, VAL []BYTE string)

  --  String without digits beviour corrected 19.2.88

  [2]INT n RETYPES n:
  SEQ
    n[0] := 0
    n[1] := 0
    Error := (SIZE string) = 0
    IF
      Error
        SKIP
      TRUE
        --{{{  (SIZE string) > 0
        INT chars.scanned, carry, digit :
        BOOL Negative, More :
        #INCLUDE "validch.occ" -- for ValidDigit
        SEQ
          Negative := string[0] = '-'
          IF
            (string[0] = '+') OR (string[0] = '-')
              chars.scanned := 1
            TRUE
              chars.scanned := 0
          More := (SIZE string) > chars.scanned
          digit := 0
          WHILE More AND (chars.scanned < (SIZE string))
            SEQ
              carry, n[0] := LONGPROD (n[0], 10, digit)
              carry, n[1] := LONGPROD (n[1], 10, carry)
              Error := Error OR (carry <> 0)
              digit, More := ValidDigit (string[chars.scanned])
              chars.scanned := chars.scanned + 1
          IF
            More
              SEQ
                carry, n[0] := LONGPROD (n[0], 10, digit)
                carry, n[1] := LONGPROD (n[1], 10, carry)
                Error := Error OR (carry <> 0)
                IF
                  Negative
                    SEQ
                      carry, n[0] := LONGDIFF (0, n[0], 0)
                      carry, n[1] := LONGDIFF (0, n[1], carry)
                      Error := Error OR (n[1] > 0)
                  TRUE
                    Error := Error OR (n[1] < 0)
            TRUE
              SEQ
                Error := TRUE
                IF
                  Negative
                    SEQ
                      carry, n[0] := LONGDIFF (0, n[0], 0)
                      carry, n[1] := LONGDIFF (0, n[1], carry)
                  TRUE
                    SKIP
        --}}}
:
--}}}
--{{{  INT32TOSTRING T2
PROC INT32TOSTRING (INT len, []BYTE string, VAL INT32 n)

  VAL [2]INT n RETYPES n:
  [2]INT W:
  INT L, R, carry:
  BYTE b:
  BOOL Neg:
  SEQ
    IF
      n[1] < 0
        SEQ
          carry, W[0] := LONGDIFF (0, n[0], 0)
          carry, W[1] := LONGDIFF (0, n[1], carry)
          Neg := TRUE
          len := 0
      (n[1] \/ n[0]) = 0
        SEQ
          W := n
          Neg := FALSE
          len := 1
          string[0] := '0'
      TRUE
        SEQ
          W := n
          Neg := FALSE
          len := 0
    WHILE (W[1] \/ W[0]) <> 0
      SEQ
        W[1], R := LONGDIV (0, W[1], 10)
        W[0], R := LONGDIV (R, W[0], 10)
        string[len] := (BYTE (R + (INT '0')))
        len := len + 1
    IF
      Neg
        SEQ
          string[len] := '-'
          len := len + 1
      TRUE
        SKIP
    L := 0
    R := (len - 1)
    WHILE (L < R)
      SEQ
        b := string[L]
        string[L] := string[R]
        string[R] := b
        L := L + 1
        R := R - 1
:
--}}}
